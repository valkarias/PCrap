use Ascii;

private class Entry {
    init() {
        this.key = none;
        this.value = none;
    }
}


private define hashStr(string) {
    let length = string.length();
    let hash = 2166136261;

    for let i = 0; i < length; i++ {
        hash = hash ^ Ascii.code(string[i]);
        hash = hash * 16777619;
    }

    return hash;
}

private define filter_pairs(instance, pairs) {
    for let i = 0; i < pairs.length(); i++ {
        let pair = pairs[0];
        instance.set(pair[0], pair[1]);
    }
}

//Dictionary/Table/HashMap
class Table {
    init(pairs) {
        private entries = [];
        private capacity = 1;
        this.length = 0;
        filter_pairs(this, pairs);
    }


    private _findEntry(string) {
        let index = hashStr(string) & (this.capacity - 1);
        let tombstone = none;

        for ;;; {
            let entry = this.entries[index];
            if entry.key == none {
                if entry.value == none {
                    //tombstone != NULL ? tombstone : index;
                    if (tombstone != none) return tombstone;
                    else return index; 
                } else {
                    if (tombstone == none) tombstone = index;
                }
            } else {
                if entry.key == string {
                    return index;
                }
            }

            index = (index + 1) & (this.capacity - 1);
        }
    }

    private _adjustCapacity(capacity) {
        let entries = [];
        for let i = 0; i < capacity; i++ {
            entries.append(Entry());
        }

        this.entries = entries;
        this.capacity = capacity;
    }

    get(key) {
        let index = this._findEntry(toString(key));
        let entry = this.entries[index];
        if (entry.key == none) return false;
        return entry.value;
    }

    set(key, value) {
        if (this.length + 1 > this.capacity * 0.75) {
            if this.capacity < 8 {
                this.capacity = 8;
            } else { this.capacity = this.capacity * 2; }
            this._adjustCapacity(this.capacity);
        }

        let k = toString(key);
        let index = this._findEntry(k);
        let entry = this.entries[index];
        let isNew = entry.key == none;

        if isNew and entry.value == none {
            this.length++;
        }

        entry.key = k;
        entry.value = value;
        this.entries[index] = entry;
        return isNew;
    }

    delete(key) {
        assert !(this.length == 0), 
            "Can't delete from an empty table.";

        let index = this._findEntry(toString(key));
        let entry = this.entries[index];
        if (entry.key == none) return false;

        entry.key = none;
        entry.value = true;
        this.entries[index] = entry;
        return true;
    }

    keys() {
        let k = [];
        for let i = 0; i < this.entries.length(); i++ {
            if this.entries[i].key != none {
                k.append(this.entries[i].key);
            }
        }

        return k;
    }
}

// let x = Table(
//     [
//         ["item1", 1]
//     ]
// );

// print(x.get("item1")); //1